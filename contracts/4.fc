{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

builder encrypt(int shift, slice text, builder result) {
  while (text.slice_bits()) {
    int code = text~load_uint(8);
    if (((code >= 65) & (code <= 90)) | ((code >= 97) & (code <= 122))) {
      int new_code = (code + shift) % 255;
      if (result.builder_bits() / 8 < 127) {
        result = result.store_uint(new_code, 8);
      } else {
        return result.store_ref(
                encrypt(shift, text, begin_cell().store_uint(new_code, 8)).end_cell()
        );
      }
    }
  }
  if (text.slice_refs()) {
    return encrypt(shift, text~load_ref().begin_parse(), result);
  }
  return result;
}

builder decrypt(int shift, slice text, builder result) {
  while (text.slice_bits()) {
    int code = text~load_uint(8);
    int new_code = (255 + (code - shift)) % 255;
    if (((code >= 65) & (code <= 90)) | ((code >= 97) & (code <= 122))) {
      if (result.builder_bits() / 8 < 127) {
        result = result.store_uint(new_code, 8);
      } else {
        return result.store_ref(
                decrypt(shift, text, begin_cell().store_uint(new_code, 8)).end_cell()
        );
      }
    }
  }
  if (text.slice_refs()) {
    return decrypt(shift, text~load_ref().begin_parse(), result);
  }
  return result;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice text_slice = text.begin_parse();
  slice prefix = text_slice~load_bits(32);

  return encrypt(shift, text_slice, begin_cell().store_slice(prefix)).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice text_slice = text.begin_parse();
  slice prefix = text_slice~load_bits(32);

  return decrypt(shift, text_slice, begin_cell().store_slice(prefix)).end_cell();
}

