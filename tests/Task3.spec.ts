import { Blockchain, SandboxContract } from '@ton-community/sandbox';
import { beginCell, Cell, toNano } from 'ton-core';
import { Task3 } from '../wrappers/Task3';
import '@ton-community/test-utils';
import { compile } from '@ton-community/blueprint';

describe('Task3', () => {
  let code: Cell;

  beforeAll(async () => {
    code = await compile('Task3');
  });

  let blockchain: Blockchain;
  let task3: SandboxContract<Task3>;

  beforeEach(async () => {
    blockchain = await Blockchain.create();

    task3 = blockchain.openContract(Task3.createFromConfig({}, code));

    const deployer = await blockchain.treasury('deployer');

    const deployResult = await task3.sendDeploy(deployer.getSender(), toNano('0.05'));

    expect(deployResult.transactions).toHaveTransaction({
      from: deployer.address,
      to: task3.address,
      deploy: true,
      success: true,
    });
  });

  it('should find and replace #1', async () => {
    const text = beginCell().storeUint(0b11000, 5).endCell();
    const result = await task3.getFindAndReplace(0b1100n, 0b1110n, text);
    expect(result).toEqualCell(beginCell().storeUint(0b11100n, 5).endCell());
  });

  it('should find and replace #2', async () => {
    const text = beginCell().storeUint(0b110011001100, 12).endCell();
    const result = await task3.getFindAndReplace(0b10n, 0b111n, text);
    expect(result).toEqualCell(beginCell().storeUint(0b111101111011110n, 15).endCell());
  });

  it('should find and replace #3', async () => {
    const text = beginCell().storeUint(0b11111111111111111111111111111111111111111111111111n, 50).endCell();
    const result = await task3.getFindAndReplace(0b1n, 0b111111111111111111111111111111n, text);
    expect(result).toEqualCell(
      beginCell()
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b11111111111111111111111n, 23)
        .storeRef(
          beginCell()
            .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
            .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
            .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
            .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
            .storeUint(0b11111111111111111111111111111111111111111111111111111111111111111111111111111n, 77)
            .endCell(),
        )
        .endCell(),
      );
  });

  it('should find and replace #4', async () => {
    const text = beginCell()
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
      .storeUint(0b11111111111110100001011n, 23)
      .storeRef(
        beginCell()
          .storeUint(0b1010100011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
          .endCell(),
      )
      .endCell();

    const result = await task3.getFindAndReplace(0b101110101n, 0b111111111n, text);
    expect(result).toEqualCell(
      beginCell()
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
        .storeUint(0b11111111111110100001111n, 23)
        .storeRef(
          beginCell()
            .storeUint(0b1111100011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111n, 100)
            .endCell(),
        )
        .endCell(),
    );
  });

  it('should find and replace #5', async () => {
    const text = beginCell().storeUint(0b100, 3).endCell();
    const result = await task3.getFindAndReplace(0b100n, 0b11n, text);
    expect(result).toEqualCell(beginCell().storeUint(0b11n, 2).endCell());
  });
});
